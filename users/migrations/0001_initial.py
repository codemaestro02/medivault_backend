# Generated by Django 5.1.4 on 2025-01-16 11:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('contact_number', models.CharField(max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.',
                                                  related_name='administrators', to='auth.group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='administrator_set', to='auth.permission',
                                                            verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Administrator',
                'verbose_name_plural': 'Administrators',
                'ordering': ['employee_id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HealthPersonnel',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(
                    choices=[('DIRECTOR', 'Medical Director'), ('DOCTOR_SPECIALIST', 'Doctor: Specialist'),
                             ('DOCTOR_GENERAL_PRACTITIONER', 'Doctor: General Practitioner'), ('NURSE', 'Nurse'),
                             ('PHARMACIST', 'Pharmacist'), ('LAB_TECHNICIAN', 'Lab Technician'),
                             ('RECEPTIONIST', 'Receptionist')], max_length=50)),
                ('department', models.CharField(
                    choices=[('EMERGENCY DEPARTMENT', 'Emergency Department (ED)'), ('CARDIOLOGY', 'Cardiology'),
                             ('NEUROLOGY', 'Neurology'), ('PEDIATRICS', 'Pediatrics'),
                             ('O&G', 'Obstetrics and Gynecology'), ('ONCOLOGY', 'Oncology'),
                             ('ORTHOPEDICS', 'Orthopedics'), ('RADIOLOGY', 'Radiology'), ('PATHOLOGY', 'Pathology'),
                             ('GENERAL_SURGERY', 'General Surgery'), ('UROLOGY', 'Urology'),
                             ('DERMATOLOGY', 'Dermatology'), ('PSYCHIATRY', 'Psychiatry'),
                             ('INTENSIVE_CARE_UNIT', 'Intensive Care Unit (ICU)'), ('OPHTHALMOLOGY', 'Ophthalmology'),
                             ('PM&R', 'Physical Medicine and Rehab')], max_length=100)),
                ('employee_id', models.AutoField(primary_key=True, serialize=False)),
                ('contact_number', models.CharField(max_length=15)),
                ('emergency_contact', models.CharField(max_length=100)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('working_hours', models.JSONField(default=dict)),
                ('is_on_duty', models.BooleanField(default=True)),
                ('is_assigned', models.BooleanField(default=False)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.',
                                                  related_name='healthpersonnel_set', to='auth.group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='healthpersonnel_set', to='auth.permission',
                                                            verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
